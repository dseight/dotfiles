#!/usr/bin/env python3

import argparse
from datetime import timedelta
import re
import sys
from collections import defaultdict
from functools import reduce
from typing import Dict, List

TIME_RE = re.compile(r"(?P<min>\d+)m(?P<sec>\d+)\.(?P<msec>\d+)s")


def parse_time(s: str) -> timedelta:
    m = TIME_RE.match(s)
    return timedelta(
        minutes=int(m["min"]),
        seconds=int(m["sec"]),
        milliseconds=int(m["msec"]),
    )


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Calculate average values based on output from multiple "time" invocations.'
    )
    parser.add_argument(
        "file",
        nargs="?",
        type=argparse.FileType("r"),
        default=sys.stdin,
        help="File to read time results from. Read from stdin if no file provided.",
    )
    args = parser.parse_args()

    results: Dict[str, List[timedelta]] = defaultdict(list)

    while line := args.file.readline():
        line = line.strip()

        # Skip empty lines
        if not line:
            continue

        name, time = line.split()
        time = parse_time(time)

        results[name].append(time)

    for name, values in results.items():
        t = reduce(lambda x, y: x + y, values) / len(values)
        minutes = int(t.seconds / 60)
        seconds = int(t.seconds % 60)
        milliseconds = int(t.microseconds / 1000)
        print(f"{name}\t{minutes}m{seconds}.{milliseconds:03d}s")
